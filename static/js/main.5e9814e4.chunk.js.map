{"version":3,"sources":["assets/curry.png","assets/dueling-fans-inner-white.png","components/Home/Home.js","components/Player/Player.js","components/Duel/Duel.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","src","curry","alt","to","Player","name","image","fppg","onClick","Duel","useState","data","setData","score","setScore","turn","setTurn","useEffect","fetch","then","response","json","players","style","backgroundPositionX","randomizePlayerArray","sampleSize","console","warn","map","player","first_name","last_name","images","default","url","Math","max","Navbar","currentPath","useLocation","pathname","Logo","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,sD,mSCiB5BC,EAZF,WACT,OACI,yBAAKC,UAAU,uBACX,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,qBAAd,cAA6C,0BAAMA,UAAU,uBAAhB,QAC7C,yBAAKA,UAAU,qBAAqBC,IAAKC,IAAOC,IAAI,WAExD,kBAAC,IAAD,CAAMH,UAAU,qBAAqBI,GAAG,SAAxC,e,gBCGGC,G,MAZA,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAChC,OACI,yBAAKT,UAAU,wBAAwBS,QAASA,GAC5C,yBAAKT,UAAU,gBACX,yBAAKA,UAAU,sBAAsBC,IAAKM,EAAOJ,IAAI,YAEzD,uBAAGH,UAAU,gBAAgBM,GAC7B,2BAAIE,GAAQ,M,QCwCTE,G,MA3CF,WAAO,IAAD,EAESC,mBAAS,IAFlB,mBAERC,EAFQ,KAEFC,EAFE,OAGWF,mBAAS,GAHpB,mBAGRG,EAHQ,KAGDC,EAHC,OAISJ,mBAAS,GAJlB,mBAIRK,EAJQ,KAIFC,EAJE,KAMfC,qBAAU,WACRC,MARM,6IASHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,gBAAEG,EAAF,EAAEA,QAAF,OAAeV,EAAQU,QAC9B,IAEH,IAAMC,EAAQ,CACZC,oBAAoB,GAAD,OAAc,IAATT,EAAoB,GAAPA,EAAW,EAA7B,MAGjBU,EAAuBC,qBAAWf,EAAM,GAC5CgB,QAAQC,KAAKH,GAOb,OACE,yBAAK1B,UAAU,uBACX,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,mBAAmBwB,MAAOA,KAE3C,yBAAKxB,UAAU,yBACZc,EAAQ,IAAMY,EAAqBI,KAAI,SAAAC,GAAM,OAC5C,kBAAC,EAAD,CACEzB,KAAMyB,EAAOC,WAAa,IAAMD,EAAOE,UACvC1B,MAAOwB,EAAOG,OAAOC,QAAQC,IAC7B5B,KAAMuB,EAAOvB,KACbC,QAAS,kBAAqBsB,EAAOvB,MAfzB6B,KAAKC,IAAL,MAAAD,KAAI,YAAQX,EAAqBI,KAAI,SAAAC,GAAM,OAAIA,EAAOvB,UAC7CO,EAASD,EAAQ,GAAKG,EAAQD,EAAO,UAiB5DF,K,iBCvBCyB,G,MAhBA,WACX,IACMC,EADWC,cACYC,SAG7B,OAFAd,QAAQC,KAAKW,GAGT,yBAAKxC,UAAU,UACX,yBAAKA,UAAU,eAAeG,IAAI,OAAOF,IAAK0C,MAC9C,wBAAI3C,UAAU,gBACV,wBAAIA,UAAU,uBAAsB,kBAAC,IAAD,CAAMI,GAAG,QAAT,SACnB,UAAhBoC,GAA2B,wBAAIxC,UAAU,uBAAsB,kBAAC,IAAD,CAAMI,GAAG,SAAT,kBCgBjEwC,MAzBf,WAEE,OACE,yBAAK5C,UAAU,OACT,kBAAC,IAAD,KACE,kBAAC,EAAD,MAIE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6C,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.5e9814e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/curry.6a30af2b.png\";","module.exports = __webpack_public_path__ + \"static/media/dueling-fans-inner-white.61b73df9.png\";","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.scss';\r\nimport curry from './../../assets/curry.png';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"home__page--wrapper\">\r\n            <div className=\"home__page--banner\">\r\n                <h2 className=\"home__page--title\">One way to <span className=\"home__page--colored\">win</span></h2>\r\n                <img className=\"home__page--player\" src={curry} alt=\"cover\" />\r\n            </div>\r\n            <Link className=\"home__page--button\" to=\"/duel\">Play Now!</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport './Player.scss';\r\n\r\nconst Player = ({name, image, fppg, onClick}) => {\r\n    return (\r\n        <div className=\"player__page--wrapper\" onClick={onClick}>\r\n            <div className=\"player__card\">\r\n                <img className=\"player__card--image\" src={image} alt=\"player\" />\r\n            </div>\r\n            <p className=\"player__name\">{name}</p>\r\n            <p>{fppg || 0}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Player from './../Player/Player';\r\nimport { sampleSize } from 'lodash';\r\nimport './Duel.scss';\r\n\r\n\r\nconst API = 'https://gist.githubusercontent.com/liamjdouglas/bb40ee8721f1a9313c22c6ea0851a105/raw/6b6fc89d55ebe4d9b05c1469349af33651d7e7f1/Player.json';\r\nconst Duel = () => {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [score, setScore] = useState(0);\r\n    const [turn, setTurn] = useState(0);\r\n\r\n    useEffect(() => {\r\n      fetch(API)\r\n        .then(response => response.json())\r\n        .then(({players}) => setData(players));\r\n    }, [])\r\n\r\n    const style = {\r\n      backgroundPositionX: `${turn !== 0 ? turn * 10: 0}%`\r\n    };\r\n\r\n    let randomizePlayerArray = sampleSize(data, 2);\r\n    console.warn(randomizePlayerArray);\r\n\r\n    const onClickHandler = (fppg) => {\r\n      const highestNumber = Math.max(...randomizePlayerArray.map(player => player.fppg))\r\n      return fppg >= highestNumber ? setScore(score + 1) : setTurn(turn + 1) ;\r\n    }\r\n  \r\n    return (\r\n      <div className=\"duel__page--wrapper\">\r\n          <div className=\"duel__basketball--wrapper\">\r\n            <div className=\"duel__basketball\" style={style}/>\r\n          </div>\r\n          <div className=\"duel__player--wrapper\">\r\n            {score < 10 && randomizePlayerArray.map(player => \r\n              <Player \r\n                name={player.first_name + ' ' + player.last_name}\r\n                image={player.images.default.url}\r\n                fppg={player.fppg}\r\n                onClick={() => onClickHandler(player.fppg)}\r\n              />)}\r\n          </div>\r\n             {score}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Duel","import React from 'react'\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport Logo from './../../assets/dueling-fans-inner-white.png';\r\nimport './Navbar.scss';\r\n\r\nconst Navbar = () => {\r\n    const location = useLocation();\r\n    const currentPath = location.pathname\r\n    console.warn(currentPath);\r\n\r\n    return (\r\n        <div className=\"navbar\">\r\n            <img className=\"navbar--logo\" alt=\"logo\" src={Logo}/>\r\n            <ul className=\"navbar__list\">\r\n                <li className=\"navbar__list--items\"><Link to=\"Home\">Home</Link></li>\r\n                {currentPath !== '/duel' && <li className=\"navbar__list--items\"><Link to=\"/duel\">Duel Now!</Link></li>}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport Home from './components/Home/Home';\nimport Duel from './components/Duel/Duel';\nimport Navbar from './components/Navbar/Navbar';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n          <Router>\n            <Navbar />\n\n              {/* A <Switch> looks through its children <Route>s and\n                  renders the first one that matches the current URL. */}\n              <Switch>\n                <Route path=\"/home\">\n                  <Home />\n                </Route>\n                <Route path=\"/duel\">\n                  <Duel />\n                </Route>\n                <Route path=\"/\">\n                  <Home />\n                </Route>\n              </Switch>\n          </Router>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}