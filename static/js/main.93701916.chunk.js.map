{"version":3,"sources":["assets/curry.png","assets/dueling-fans-inner-white.png","assets/loser.png","assets/kobe-winner.png","assets/font/Shentox W04 Bold.ttf","components/Home/Home.js","components/Player/Player.js","redux/actions.js","components/Duel/Duel.js","components/Navbar/Navbar.js","components/Results/Result.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/state.js","redux/reducers/index.js","redux/sagas.js","redux/store.js","index.js"],"names":["module","exports","Home","className","src","curry","alt","to","Player","name","image","fppg","onClickHandler","showFppg","onClick","getPlayerListResponse","data","type","withRouter","connect","players","playerList","turn","score","dispatch","getPlayerListRequest","incrementScore","incrementTurn","hideFppg","history","useEffect","style","backgroundPositionX","length","map","player","first_name","last_name","images","default","url","Math","max","push","pathname","useLocation","Logo","Winner","kobe","Loser","jordan","resetGame","checkIfComingFromDuelPage","includes","App","path","Boolean","window","location","hostname","match","initialState","addReducer","state","combineReducers","requestApiData","action","axios","get","response","randomizePlayers","sampleSize","put","console","log","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","reducer","composeWithDevTools","applyMiddleware","run","mySaga","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.93701916.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/curry.6a30af2b.png\";","module.exports = __webpack_public_path__ + \"static/media/dueling-fans-inner-white.61b73df9.png\";","module.exports = __webpack_public_path__ + \"static/media/loser.8e5cf3ce.png\";","module.exports = __webpack_public_path__ + \"static/media/kobe-winner.ac7ef029.png\";","module.exports = __webpack_public_path__ + \"static/media/Shentox W04 Bold.557661ea.ttf\";","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.scss';\r\nimport curry from './../../assets/curry.png';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"home__page--wrapper\">\r\n            <div className=\"home__page--banner\">\r\n                <h2 className=\"home__page--title\">One way to <span className=\"home__page--colored\">win</span></h2>\r\n                <img className=\"home__page--player\" src={curry} alt=\"cover\" />\r\n            </div>\r\n            <Link className=\"home__page--button\" to=\"/duel\">Play Now!</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport './Player.scss';\r\n\r\nconst Player = ({name, image, fppg, onClickHandler, showFppg}) => {\r\n    return (\r\n        <div className=\"player__page--wrapper\" onClick={onClickHandler}>\r\n            <div className=\"player__card\">\r\n                {showFppg && <p className=\"player__fppg\">{ fppg || 0 }</p>}\r\n                <img className=\"player__card--image\" src={image} alt=\"player\" />\r\n            </div>\r\n            <p className=\"player__name\">{name}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player;\r\n","export const GET_PLAYER_LIST_REQUEST = \"GET_PLAYER_LIST_REQUEST\";\r\nexport const GET_PLAYER_LIST_RESPONSE = \"GET_PLAYER_LIST_RESPONSE\";\r\nexport const INCREMENT_SCORE = 'INCREMENT_SCORE';\r\nexport const INCREMENT_TURN = 'INCREMENT_TURN';\r\nexport const HIDE_FPPG = 'HIDE_FPPG';\r\nexport const RESET_GAME = 'RESET_GAME';\r\n\r\nexport const getPlayerListRequest = () => ({ type: GET_PLAYER_LIST_REQUEST });\r\nexport const getPlayerListResponse = data => ({ type: GET_PLAYER_LIST_RESPONSE, data });\r\n\r\nexport const incrementScore = () => ({ type: INCREMENT_SCORE });\r\nexport const incrementTurn = () => ({ type: INCREMENT_TURN });\r\n\r\nexport const hideFppg = () => ({ type: HIDE_FPPG});\r\nexport const resetGame = () => ({type: RESET_GAME});","import React, {useEffect} from 'react';\r\nimport Player from './../Player/Player';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\nimport { getPlayerListRequest, incrementScore, incrementTurn, hideFppg } from './../../redux/actions';\r\nimport './Duel.scss';\r\n\r\nconst Duel = ({players, getPlayerListRequest, hideFppg, incrementScore, incrementTurn, score, turn, showFppg, history}) => {\r\n\r\n    useEffect(() => {\r\n      getPlayerListRequest();\r\n    }, []);\r\n\r\n    const style = {\r\n      backgroundPositionX: `${turn !== 0 ? turn * 10: 0}%`\r\n    };\r\n\r\n    const onClickHandler = fppg => {\r\n      if(showFppg) return;\r\n      const highestNumber = players.length > 0 && Math.max(...players.map(player => player.fppg))\r\n      fppg >= highestNumber ? incrementScore() : incrementTurn();\r\n    }\r\n\r\n    const nextRound = () => {\r\n      if(turn > 9 || score > 9) history.push(`/result/${score > 9 ? 'success' : 'fail'}`)\r\n      hideFppg();\r\n      getPlayerListRequest();\r\n    }\r\n\r\n    return (\r\n      <div className=\"duel__page--wrapper\">\r\n          <div className=\"duel__basketball--wrapper\">\r\n            <div className=\"duel__basketball\" style={style}/>\r\n          </div>\r\n          <p className=\"duel__score\">Your score: <span>{score}</span></p>\r\n          <div className=\"duel__player--wrapper\">\r\n            {players.length > 0 && players.map(player =>\r\n              <Player\r\n                name={player.first_name + ' ' + player.last_name}\r\n                image={player.images.default.url}\r\n                fppg={player.fppg}\r\n                showFppg={showFppg}\r\n                onClickHandler={() => onClickHandler(player.fppg)}\r\n              />)}\r\n          </div>\r\n          <div className=\"duel__page--button\" onClick={() => nextRound()}>Next</div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n  getPlayerListRequest: () => dispatch(getPlayerListRequest()),\r\n  incrementScore: () => dispatch(incrementScore()),\r\n  incrementTurn: () => dispatch(incrementTurn()),\r\n  hideFppg: () => dispatch(hideFppg()),\r\n})\r\nconst mapStateToProps = ({data}) => ({ \r\n  players: data.playerList,\r\n  turn: data.turn,\r\n  score: data.score,\r\n  showFppg: data.showFppg\r\n});\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Duel));","import React from 'react'\r\nimport { Link, useLocation, withRouter } from 'react-router-dom';\r\nimport Logo from './../../assets/dueling-fans-inner-white.png';\r\nimport './Navbar.scss';\r\n\r\nconst Navbar = ({history}) => {\r\n    const {pathname} = useLocation();\r\n    return (\r\n        <div className=\"navbar\">\r\n            <img className=\"navbar--logo\" alt=\"logo\" src={Logo} onClick={() => history.push('/home')} />\r\n            <ul className=\"navbar__list\">\r\n                <li className=\"navbar__list--items\"><Link to=\"/Home\">Home</Link></li>\r\n                {pathname !== '/duel' && <li className=\"navbar__list--items\"><Link to=\"/duel\">Duel Now!</Link></li>}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navbar)\r\n","import React, {useEffect} from 'react'\r\nimport { withRouter, useLocation } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport { resetGame } from './../../redux/actions';\r\nimport jordan from './../../assets/loser.png';\r\nimport kobe from './../../assets/kobe-winner.png';\r\nimport './Result.scss';\r\n\r\nexport const Winner = () =>\r\n<div className=\"result--wrapper\">\r\n    <img className=\"result--image\" src={kobe || 'https://raw.githubusercontent.com/gokhanipek/duelingfans/master/src/assets/kobe-winner.png'} alt=\"kobe\" />\r\n    <p className=\"result--text\">Winner!</p>\r\n</div>\r\n\r\n\r\nexport const Loser = () => \r\n<div className=\"result--wrapper\">\r\n    <img className=\"result--image\" src={jordan || 'https://raw.githubusercontent.com/gokhanipek/duelingfans/master/src/assets/loser.png'} alt=\"jordan\" />\r\n    <p className=\"result--text\">Loser!</p>\r\n</div>\r\n\r\n\r\nconst Result = ({score, turn, history, resetGame}) => {\r\n    const checkIfComingFromDuelPage = score > 9 || turn > 9;\r\n    useEffect(() => {\r\n        !checkIfComingFromDuelPage && history.push('/home');\r\n        resetGame();\r\n    }, [])\r\n    const {pathname} = useLocation();\r\n    return pathname.includes('success') ? <Winner/> : <Loser/>\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    resetGame: () => dispatch(resetGame()),\r\n})\r\n\r\nconst mapStateToProps = ({data}) => ({ \r\n    turn: data.turn,\r\n    score: data.score,\r\n});\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Result));\r\n\r\n\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Duel from './components/Duel/Duel';\nimport Navbar from './components/Navbar/Navbar';\nimport Result from './components/Results/Result';\nimport './App.css';\n\nfunction App({turn, score}) {\n\n  return (\n    <div className=\"App\">\n          <Router>\n            <Navbar />\n              <Switch>\n                <Route path=\"/home\">\n                  <Home />\n                </Route>\n                <Route path=\"/duel\">\n                  <Duel />\n                </Route>\n                <Route path=\"/result\">\n                  <Result />\n                </Route>\n                <Route path=\"/success/:type\">\n                  <Result/>\n                </Route>\n                <Route path=\"/\">\n                  <Home />\n                </Route>\n              </Switch>\n          </Router>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    playerList: {},\r\n    turn: 0,\r\n    score: 0,\r\n    showFppg: false\r\n};\r\n\r\nexport default initialState;","import initialState from './initialState';\r\n  \r\nfunction addReducer(state = initialState, {type, data}) {\r\n  switch(type) {\r\n    case 'GET_PLAYER_LIST_REQUEST':\r\n      return { ...state };\r\n    case 'GET_PLAYER_LIST_RESPONSE':\r\n      return { \r\n        ...state, \r\n        playerList: data\r\n      };\r\n    case 'INCREMENT_SCORE':\r\n      return {\r\n        ...state, \r\n        score: state.score + 1,\r\n        showFppg: true\r\n      }\r\n    case 'INCREMENT_TURN':\r\n      return {\r\n        ...state, \r\n        turn: state.turn + 1,\r\n        showFppg: true\r\n      }\r\n    case 'HIDE_FPPG':\r\n      return {\r\n        ...state,\r\n        showFppg: false\r\n      }\r\n    case 'RESET_GAME':\r\n      return {\r\n        ...initialState\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default addReducer;\r\n  ","import { combineReducers } from \"redux\";\r\n\r\nimport data from \"./state\";\r\n\r\nexport default combineReducers({\r\n  data\r\n});\r\n","import { put, takeEvery } from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport { sampleSize } from 'lodash';\r\nimport { \r\n    GET_PLAYER_LIST_REQUEST,\r\n    getPlayerListResponse,\r\n } from \"./actions\";\r\n\r\nexport function* getPlayerListRequest(action) {\r\n      try {\r\n        const response = yield axios.get(\"https://gist.githubusercontent.com/liamjdouglas/bb40ee8721f1a9313c22c6ea0851a105/raw/6b6fc89d55ebe4d9b05c1469349af33651d7e7f1/Player.json\");\r\n        const { data } = response;\r\n        const randomizePlayers = sampleSize(data.players, 2);\r\n        yield put(getPlayerListResponse(randomizePlayers));\r\n      } catch (e) {\r\n          console.log(e);\r\n      }\r\n};\r\n\r\nexport default function* requestApiData() {\r\n  yield takeEvery( GET_PLAYER_LIST_REQUEST, getPlayerListRequest );\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from \"./reducers\";\r\nimport mySaga from \"./sagas\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(mySaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './assets/font/Shentox W04 Bold.ttf';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}